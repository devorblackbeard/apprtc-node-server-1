#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('AppRTC-node-server:server');
var http = require('http');
var socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//IO_Sockets

var listOfUsers = {};

var io = socketIO.listen(server);
io.sockets.on('connection', function(socket) {

    var params = socket.handshake.query;
    var sessionid = params.sessionid;
    //var socketMessageEvent = params.msgEvent || '';
    var userId = params.userid ;

    appendUser(socket);

    // convenience function to log server messages on the client
    function log() {
        var array = ['Message from server:'];
        array.push.apply(array, arguments);
        socket.emit('log', array);
    }



    //append  user
    function appendUser(socket) {

        var params = socket.handshake.query;
        var sessionId = params.sessionid;
        var userId = params.userid;

        listOfUsers[userId] = {
            socket: socket,
            userid:userId,
            sesionId:sessionId
        };

        socket.userid = userId;
    }



    socket.on('message', function(message) {
        log('Client said: ', message);
        // for a real app, would be room-only (not broadcast)
        socket.broadcast.emit('message', message);
    });



    socket.on('call', function(userId) {

        var userTo = listOfUsers[userId];

        var userFrom = listOfUsers[socket.userid];

        if (userTo == undefined) {
            socket.leaveAll()
            return;
        } else{
            socket.join(userId);
            userFrom.socket.emit('outgoing-call', userId, socket.id);
            userTo.socket.emit('incoming-call', userId, socket.id);
            userFrom.otherUserId = userId;
            userTo.otherUserId = socket.userid;
        }
    });

    socket.on('answer-call', function(userId) {


        var userTo = listOfUsers[userId];
        var userFrom = listOfUsers[socket.userid];

        if (userTo == undefined) {
            socket.leaveAll()
            return;
        } else{

            if (userFrom === userTo){
                userTo.socket.emit('answer-call-phone', userId, socket.id);
                userFrom = listOfUsers[userTo.otherUserId];
                userFrom.socket.emit('answer-call-phone', userId, socket.id);

            }else{
                socket.emit('answer-call-phone', userId, socket.id);
                userTo.socket.emit('answer-call-phone', userId, socket.id);
            }
        }
    });


    socket.on('hang-up', function(userId) {
        var userTo = listOfUsers[userId];
        var userFrom = listOfUsers[socket.userid];

        if (userTo == undefined) {
            socket.leaveAll()
            return;
        } else{

            if (userFrom === userTo){
                userTo.socket.emit('hang-up-call', userId, socket.id);
                userFrom = listOfUsers[userTo.otherUserId];
                userFrom.socket.emit('hang-up-call', userId, socket.id);

            }else{
                socket.emit('hang-up-call', userId, socket.id);
                userTo.socket.emit('hang-up-call', userId, socket.id);
            }
        }
    });


    socket.on('get-users-ids', function() {
        var userids =[];
        var currentUser = listOfUsers[socket.userid];
        for (var user in listOfUsers)
            if(currentUser.userid !== user)
                userids.push(user)
        socket.emit('users-ids',userids);
    });

    socket.on('ipaddr', function() {
        var ifaces = os.networkInterfaces();
        for (var dev in ifaces) {
            ifaces[dev].forEach(function(details) {
                if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
                    socket.emit('ipaddr', details.address);
                }
            });
        }
    });

    socket.on('bye', function(){
        console.log('received bye');
    });

    socket.on('disconnect', function() {
        console.log('Got disconnect!');
        var disconectedUser = listOfUsers[socket.userid];
        delete listOfUsers[socket.userid];
    });

});





